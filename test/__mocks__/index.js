itemList = [
  {
    "rendered_body": "<p>初めまして、こんにちは。<br>\nNuxt.jsの記事を書いていたところ、空きを見つけたので参加登録しました。<br>\n遅れての参加なので、もし問題があればご指摘ください。</p>\n\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>Nuxt.js（vue.js）の勉強がてらQiita APIを使って投稿一覧サービスを作りました。<br>\nプロジェクト作成から静的サイトを生成までをまとめたいと思います。</p>\n\n<p>何かお気づきの点あればアドバイス頂けると嬉しいです<img alt=\":bow_tone1:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f647-1f3fb.png\" title=\":bow_tone1:\" width=\"20\"></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/87f98eac0fa4e8f61c671d6481b91e1833feb4c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f64313763383634362d303037392d383735392d336638322d6562613534366466316261342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/87f98eac0fa4e8f61c671d6481b91e1833feb4c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f64313763383634362d303037392d383735392d336638322d6562613534366466316261342e706e67\" alt=\"ss.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/194902/d17c8646-0079-8759-3f82-eba546df1ba4.png\"></a></p>\n\n<p><a href=\"https://aytdm.github.io/hello-nuxt/search\" rel=\"nofollow noopener\" target=\"_blank\">デモ</a> （PCでの操作を推奨）</p>\n\n<h1>\n<span id=\"モジュールのバージョン\" class=\"fragment\"></span><a href=\"#%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3\"><i class=\"fa fa-link\"></i></a>モジュールのバージョン</h1>\n\n<p>使用するモジュールのバーションは以下の通りです。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\"nuxt\": \"^1.0.0-rc11\",\n\"axios\": \"^0.17.1\",\n\"element-ui\": \"^2.0.8\"\n</pre></div></div>\n\n<h1>\n<span id=\"使用するapi\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8Bapi\"><i class=\"fa fa-link\"></i></a>使用するAPI</h1>\n\n<p>Qiita API v2の<a href=\"https://qiita.com/api/v2/docs#%E6%8A%95%E7%A8%BF\">投稿</a>を使用します。<br>\n未認証でも（IPアドレスごとに）1時間に60回までリクエストを送れるので、未認証でコールします。</p>\n\n<h1>\n<span id=\"プロジェクトの作成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクトの作成</h1>\n\n<p><a href=\"https://ja.nuxtjs.org/guide/installation\" rel=\"nofollow noopener\" target=\"_blank\">スターターテンプレート</a>からプロジェクトを作成します。<br>\nプロジェクト名は「hello-nuxt」としました。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ vue init nuxt-community/starter-template hello-nuxt\n$ cd hello-nuxt\n$ yarn install\n</pre></div></div>\n\n<p>今回はUIライブラリに<a href=\"http://element.eleme.io/#/en-US\" rel=\"nofollow noopener\" target=\"_blank\">element-ui</a>、Ajax通信ライブラリに<a href=\"https://github.com/axios/axios\" rel=\"nofollow noopener\" target=\"_blank\">axios</a>を使うため<br>\nそれぞれインストールします。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ yarn add axios element-ui\n</pre></div></div>\n\n<h1>\n<span id=\"設定\" class=\"fragment\"></span><a href=\"#%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>設定</h1>\n\n<p>nuxt.config.jsでサイトの設定を行います。<br>\n＃headやローディング部分は手を加えていないので省略しています。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">nuxt.config.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'~plugins/element-ui'</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">src</span><span class=\"p\">:</span> <span class=\"s1\">'~plugins/element-ui'</span><span class=\"p\">,</span> <span class=\"na\">ssr</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">}],</span>\n  <span class=\"na\">css</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'element-ui/lib/theme-chalk/index.css'</span><span class=\"p\">],</span>\n  <span class=\"cm\">/*\n  ** Build configuration\n  */</span>\n  <span class=\"na\">build</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">vendor</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'axios'</span><span class=\"p\">,</span> <span class=\"s1\">'element-ui'</span><span class=\"p\">],</span>\n    <span class=\"cm\">/*\n    ** Run ESLint on save\n    */</span>\n    <span class=\"nx\">extend</span> <span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">,</span> <span class=\"nx\">ctx</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">dev</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">isClient</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">rules</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span>\n          <span class=\"na\">enforce</span><span class=\"p\">:</span> <span class=\"s1\">'pre'</span><span class=\"p\">,</span>\n          <span class=\"na\">test</span><span class=\"p\">:</span> <span class=\"sr\">/</span><span class=\"se\">\\.(</span><span class=\"sr\">js|vue</span><span class=\"se\">)</span><span class=\"sr\">$/</span><span class=\"p\">,</span>\n          <span class=\"na\">loader</span><span class=\"p\">:</span> <span class=\"s1\">'eslint-loader'</span><span class=\"p\">,</span>\n          <span class=\"na\">exclude</span><span class=\"p\">:</span> <span class=\"sr\">/</span><span class=\"se\">(</span><span class=\"sr\">node_modules</span><span class=\"se\">)</span><span class=\"sr\">/</span>\n        <span class=\"p\">})</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">rules</span> <span class=\"o\">=</span> <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">rules</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">rule</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">rule</span><span class=\"p\">.</span><span class=\"nx\">loader</span> <span class=\"o\">===</span> <span class=\"s1\">'babel-loader'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">rule</span><span class=\"p\">.</span><span class=\"nx\">exclude</span> <span class=\"o\">=</span> <span class=\"sr\">/node_modules/</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nx\">rule</span>\n      <span class=\"p\">})</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><code>cssプロパティ</code>で設定したファイルはグローバルに適用されるため、ここにelement-uiを指定します。<br>\nまた、プラグインとして定義するため、<code>pluginsプロパティ</code>にも指定します。<br>\n（pluginsプロパティに指定したelement-ui用のプラグインは後ほど作成）</p>\n\n<p><code>buildプロパティ</code>の<code>extend</code>には、babelやeslintの適用除外のディレクトリを指定します。<br>\nさらに<code>buildプロパティ</code>の<code>vendor</code>にaxiosとelement-uiを指定し、全体のサイズをコンパクトにします。</p>\n\n<p>これで設定は完了です。</p>\n\n<h1>\n<span id=\"プラグインの作成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>プラグインの作成</h1>\n\n<p>nuxt.config.jsで指定したelement-ui用のプラグインを作成します。<br>\nplugins下にelement-ui.jsを作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">plugins/element-ui.js</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nx\">Vue</span> <span class=\"k\">from</span> <span class=\"s1\">'vue'</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ElementUI</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'element-ui'</span><span class=\"p\">)</span>\n<span class=\"kd\">const</span> <span class=\"nx\">locale</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'element-ui/lib/locale/lang/ja'</span><span class=\"p\">)</span>\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">ElementUI</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">locale</span> <span class=\"p\">})</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"レイアウトコンポーネントの作成\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>レイアウト・コンポーネントの作成</h1>\n\n<h2>\n<span id=\"レイアウト\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88\"><i class=\"fa fa-link\"></i></a>レイアウト</h2>\n\n<p>ヘッダーとコンテンツ（検索、投稿一覧）、フッターのレイアウトを作ります。<br>\n＃本当はページネーションも作りたかったのですが、レスポンスヘッダーの「Total-Count」等が取得できないため割愛しました。</p>\n\n<p>【イメージ図】<br>\n<a href=\"https://camo.qiitausercontent.com/61688d92f6c966a1205777171157100f94f4e629/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f30363861666136382d383831312d363661312d346639652d3639363863653762666163312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/61688d92f6c966a1205777171157100f94f4e629/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f30363861666136382d383831312d363661312d346639652d3639363863653762666163312e706e67\" width=\"65%\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/194902/068afa68-8811-66a1-4f9e-6968ce7bfac1.png\"></a><br>\n※以下、図中の言葉を見出しに使います。</p>\n\n<p>layouts下にnavbar.vueを作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">layouts/navbar.vue</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;template&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;my-header</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;nuxt</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;my-footer</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/template&gt;</span>\n\n<span class=\"nt\">&lt;script&gt;</span>\n<span class=\"k\">import</span> <span class=\"nx\">MyHeader</span> <span class=\"k\">from</span> <span class=\"s1\">'~/components/Header.vue'</span>\n<span class=\"k\">import</span> <span class=\"nx\">MyFooter</span> <span class=\"k\">from</span> <span class=\"s1\">'~/components/Footer.vue'</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'navbar'</span><span class=\"p\">,</span>\n  <span class=\"na\">components</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">MyHeader</span><span class=\"p\">,</span>\n    <span class=\"nx\">MyFooter</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"コンポーネント\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>コンポーネント</h2>\n\n<h3>\n<span id=\"ヘッダーフッター\" class=\"fragment\"></span><a href=\"#%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E3%83%95%E3%83%83%E3%82%BF%E3%83%BC\"><i class=\"fa fa-link\"></i></a>ヘッダー、フッター</h3>\n\n<p>components下にHeader.vue、Footer.vueを作成します。<br>\nヘッダー、フッターはシンプルに背景色はQiitaカラーで(〃'ω')</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">components/Header.vue</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;template&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"header\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;b&gt;&lt;nuxt-link</span> <span class=\"na\">to=</span><span class=\"s\">\"/\"</span><span class=\"nt\">&gt;</span>Hello Qiita with Nuxt.js ＼＼\\\\ ٩(*'ω'*)و //／／<span class=\"nt\">&lt;/nuxt-link&gt;&lt;/b&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/template&gt;</span>\n\n<span class=\"nt\">&lt;style&gt;</span>\n<span class=\"nc\">.header</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">20px</span><span class=\"p\">;</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n    <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#59bb0c</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#fff</span><span class=\"p\">;</span>\n    <span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">left</span><span class=\"p\">;</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">15px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.header</span> <span class=\"nt\">a</span> <span class=\"p\">{</span>\n    <span class=\"nl\">text-decoration</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.header</span> <span class=\"nt\">a</span><span class=\"nd\">:visited</span> <span class=\"p\">{</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#fff</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/style&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">components/Footer.vue</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;template&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"footer\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/template&gt;</span>\n\n<span class=\"nt\">&lt;style&gt;</span>\n<span class=\"nc\">.footer</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n    <span class=\"nl\">bottom</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">61px</span><span class=\"p\">;</span>\n    <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#59bb0c</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">white</span><span class=\"p\">;</span>\n    <span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/style&gt;</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"検索\" class=\"fragment\"></span><a href=\"#%E6%A4%9C%E7%B4%A2\"><i class=\"fa fa-link\"></i></a>検索</h3>\n\n<p>pages/search.vueを作成します。<br>\nsearch.vueではページ表示時にQiitaのAPIをコールする機能と検索画面に入力されたキーワードを元に<br>\nQiitaのAPIをコールする機能、入力値のバリデーション機能を持ちます。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">pages/search.vue</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;template&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;el-container&gt;</span>\n      <span class=\"nt\">&lt;el-main&gt;</span>\n        <span class=\"c\">&lt;!-- 検索フォーム --&gt;</span>\n        <span class=\"nt\">&lt;el-form</span> <span class=\"na\">:inline=</span><span class=\"s\">\"true\"</span> <span class=\"na\">:model=</span><span class=\"s\">\"searchForm\"</span> <span class=\"na\">ref=</span><span class=\"s\">\"searchForm\"</span> <span class=\"na\">:rules=</span><span class=\"s\">\"rules\"</span> <span class=\"err\">@</span><span class=\"na\">submit</span><span class=\"err\">.</span><span class=\"na\">native</span><span class=\"err\">.</span><span class=\"na\">prevent</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;el-form-item</span> <span class=\"na\">prop=</span><span class=\"s\">\"keyword\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;el-input</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"search by keyword\"</span> <span class=\"na\">prefix-icon=</span><span class=\"s\">\"el-icon-search\"</span> <span class=\"na\">v-model=</span><span class=\"s\">\"searchForm.keyword\"</span>  <span class=\"err\">@</span><span class=\"na\">keyup</span><span class=\"err\">.</span><span class=\"na\">enter</span><span class=\"err\">.</span><span class=\"na\">native=</span><span class=\"s\">\"search('searchForm')\"</span> <span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;/el-form-item&gt;</span>\n          <span class=\"nt\">&lt;el-form-item&gt;</span>\n            <span class=\"nt\">&lt;el-button</span> <span class=\"err\">@</span><span class=\"na\">click=</span><span class=\"s\">\"search('searchForm')\"</span><span class=\"nt\">&gt;</span>search<span class=\"nt\">&lt;/el-button&gt;</span>\n          <span class=\"nt\">&lt;/el-form-item&gt;</span>\n        <span class=\"nt\">&lt;/el-form&gt;</span>\n        <span class=\"c\">&lt;!-- 投稿一覧 --&gt;</span>\n        <span class=\"nt\">&lt;my-list</span> <span class=\"na\">:lists=</span><span class=\"s\">\"mylist\"</span> <span class=\"na\">:hasData=</span><span class=\"s\">\"hasData\"</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/el-main&gt;</span>\n    <span class=\"nt\">&lt;/el-container&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/template&gt;</span>\n\n<span class=\"nt\">&lt;script </span><span class=\"na\">lang=</span><span class=\"s\">\"babel\"</span><span class=\"nt\">&gt;</span>\n<span class=\"k\">import</span> <span class=\"nx\">axios</span> <span class=\"k\">from</span> <span class=\"s1\">'axios'</span>\n<span class=\"k\">import</span> <span class=\"nx\">MyList</span> <span class=\"k\">from</span> <span class=\"s1\">'~/components/List.vue'</span>\n<span class=\"kd\">const</span> <span class=\"nx\">BASE_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'https://qiita.com/api/v2/'</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"na\">layout</span><span class=\"p\">:</span> <span class=\"s1\">'navbar'</span><span class=\"p\">,</span>\n  <span class=\"na\">components</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 投稿一覧を表示するコンポーネント</span>\n    <span class=\"nx\">MyList</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">data</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 検索フォーム</span>\n      <span class=\"na\">searchForm</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">keyword</span><span class=\"p\">:</span> <span class=\"s1\">''</span>\n      <span class=\"p\">},</span>\n      <span class=\"c1\">// バリデーションルール</span>\n      <span class=\"na\">rules</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">keyword</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">required</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'Please input the keyword'</span><span class=\"p\">,</span> <span class=\"na\">trigger</span><span class=\"p\">:</span> <span class=\"s1\">'blur'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">},</span>\n      <span class=\"na\">mylist</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n      <span class=\"na\">hasData</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">created</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 初回ページ描画時にキーワード「nuxt.js」でQiitaのAPIをコール</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">searchForm</span><span class=\"p\">.</span><span class=\"nx\">keyword</span> <span class=\"o\">=</span> <span class=\"s1\">'nuxt.js'</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sendRequest</span><span class=\"p\">()</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">searchForm</span><span class=\"p\">.</span><span class=\"nx\">keyword</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// キーワード検索時に呼ばれるメソッド。バリデーション含む</span>\n    <span class=\"nx\">search</span> <span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$refs</span><span class=\"p\">[</span><span class=\"nx\">form</span><span class=\"p\">].</span><span class=\"nx\">validate</span><span class=\"p\">((</span><span class=\"nx\">valid</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">valid</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"kc\">false</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sendRequest</span><span class=\"p\">()</span>\n      <span class=\"p\">})</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\">// リクエスト送信</span>\n    <span class=\"nx\">sendRequest</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">BASE_URL</span> <span class=\"o\">+</span> <span class=\"s1\">'items'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span><span class=\"p\">},</span>\n        <span class=\"na\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"na\">page</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"na\">per_page</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n          <span class=\"na\">query</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">searchForm</span><span class=\"p\">.</span><span class=\"nx\">keyword</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">response</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">hasData</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n          <span class=\"p\">}</span>\n          <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">mylist</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">data</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s1\">'error:'</span><span class=\"p\">,</span> <span class=\"nx\">e</span><span class=\"p\">)</span>\n        <span class=\"p\">})</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n\n<span class=\"nt\">&lt;style&gt;</span>\n<span class=\"nc\">.el-form</span> <span class=\"p\">{</span>\n  <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin-left</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/style&gt;</span>\n</pre></div>\n</div>\n\n<p>バリデーションでは空入力であるかどうかのみチェックを行っています。<br>\n<a href=\"https://camo.qiitausercontent.com/ec4f333e41ae54b5a5500cf460e510f1f31fcf02/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f62316338396463342d393966372d333637332d383134322d3332353266323932613833322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/ec4f333e41ae54b5a5500cf460e510f1f31fcf02/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f62316338396463342d393966372d333637332d383134322d3332353266323932613833322e706e67\" alt=\"ss5.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/194902/b1c89dc4-99f7-3673-8142-3252f292a832.png\"></a></p>\n\n<h3>\n<span id=\"投稿一覧\" class=\"fragment\"></span><a href=\"#%E6%8A%95%E7%A8%BF%E4%B8%80%E8%A6%A7\"><i class=\"fa fa-link\"></i></a>投稿一覧</h3>\n\n<p>components下にList.vueを作成します。<br>\nList.vueは検索からQiita APIのレスポンスを受け取り、element-uiの<a href=\"http://element.eleme.io/#/en-US/component/card\" rel=\"nofollow noopener\" target=\"_blank\">カード</a>で描画を行うコンポーネントです。<br>\n他にページトップへ遷移する機能を持ちます。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">components/List.vue</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;template&gt;</span>\n<span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"c\">&lt;!-- 検索結果が0件だった場合 --&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">v-if=</span><span class=\"s\">\"lists.length === 0 &amp;&amp; !hasData\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;i</span> <span class=\"na\">class=</span><span class=\"s\">\"el-icon-warning\"</span><span class=\"nt\">&gt;</span><span class=\"ni\">&amp;nbsp;</span>No results found for your keyword.<span class=\"nt\">&lt;/i&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"c\">&lt;!-- 投稿一覧 --&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">v-else</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;el-col</span> <span class=\"na\">:span=</span><span class=\"s\">\"6\"</span> <span class=\"na\">v-for=</span><span class=\"s\">\"(element, index) in lists\"</span> <span class=\"na\">:key=</span><span class=\"s\">\"index\"</span> <span class=\"na\">class=</span><span class=\"s\">\"col-style\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;el-card</span> <span class=\"na\">:body-style=</span><span class=\"s\">\"{ padding: '15px' }\"</span> <span class=\"na\">class=</span><span class=\"s\">\"box-card\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">slot=</span><span class=\"s\">\"header\"</span> <span class=\"na\">class=</span><span class=\"s\">\"clearfix\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;a</span> <span class=\"na\">:href=</span><span class=\"s\">\"element.url\"</span> <span class=\"na\">target=</span><span class=\"s\">\"_blank\"</span><span class=\"nt\">&gt;</span>{{ element.title }}<span class=\"nt\">&lt;/a&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"bottom clearfix content-style text\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;div&gt;</span>{{ element.created_at }}<span class=\"nt\">&lt;/div&gt;</span>\n          <span class=\"nt\">&lt;span&gt;</span>\n            <span class=\"nt\">&lt;img</span> <span class=\"na\">:src=</span><span class=\"s\">\"element.user.profile_image_url\"</span> <span class=\"na\">width=</span><span class=\"s\">\"15\"</span> <span class=\"na\">height=</span><span class=\"s\">\"15\"</span> <span class=\"nt\">/&gt;</span>\n            <span class=\"c\">&lt;!-- 自己紹介があればPopoverで表示 --&gt;</span>\n            <span class=\"nt\">&lt;template</span> <span class=\"na\">v-if=</span><span class=\"s\">\"element.user.description\"</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;el-popover</span> <span class=\"na\">slot=</span><span class=\"s\">\"description\"</span> <span class=\"na\">placement=</span><span class=\"s\">\"top-start\"</span> <span class=\"na\">width=</span><span class=\"s\">\"300\"</span> <span class=\"na\">trigger=</span><span class=\"s\">\"hover\"</span> <span class=\"na\">:content=</span><span class=\"s\">\"element.user.description\"</span><span class=\"nt\">&gt;</span>\n                <span class=\"nt\">&lt;span</span> <span class=\"na\">slot=</span><span class=\"s\">\"reference\"</span><span class=\"nt\">&gt;</span><span class=\"ni\">&amp;nbsp;</span>{{ element.user.id }}<span class=\"nt\">&lt;/span&gt;</span>\n              <span class=\"nt\">&lt;/el-popover&gt;</span>\n            <span class=\"nt\">&lt;/template&gt;</span>\n            <span class=\"nt\">&lt;template</span> <span class=\"na\">v-else</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;span&gt;</span><span class=\"ni\">&amp;nbsp;</span>{{ element.user.id }}<span class=\"nt\">&lt;/span&gt;</span>\n            <span class=\"nt\">&lt;/template&gt;</span>\n          <span class=\"nt\">&lt;/span&gt;</span>\n          <span class=\"ni\">&amp;nbsp;</span>\n          <span class=\"nt\">&lt;span&gt;</span>\n            <span class=\"nt\">&lt;i</span> <span class=\"na\">class=</span><span class=\"s\">\"el-icon-star-off\"</span><span class=\"nt\">&gt;</span>{{ element.likes_count }}<span class=\"nt\">&lt;/i&gt;</span>\n          <span class=\"nt\">&lt;/span&gt;</span>\n          <span class=\"nt\">&lt;div&gt;</span>{{ getDescription(element.body) }}<span class=\"nt\">&lt;/div&gt;</span>\n          <span class=\"nt\">&lt;el-tag</span> <span class=\"na\">size=</span><span class=\"s\">\"mini\"</span> <span class=\"na\">type=</span><span class=\"s\">\"info\"</span> <span class=\"na\">class=</span><span class=\"s\">\"tab-style\"</span> <span class=\"na\">v-for=</span><span class=\"s\">\"(tag, index) in element.tags\"</span> <span class=\"na\">:key=</span><span class=\"s\">\"index\"</span><span class=\"nt\">&gt;</span>{{ tag.name }}<span class=\"nt\">&lt;/el-tag&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/el-card&gt;</span>\n    <span class=\"nt\">&lt;/el-col&gt;</span>\n    <span class=\"c\">&lt;!-- ページトップへスクロール用のボタン --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">v-if=</span><span class=\"s\">\"250 &lt; scrollY\"</span> <span class=\"na\">class=</span><span class=\"s\">\"page-component-up\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;transition</span> <span class=\"na\">name=</span><span class=\"s\">\"fade\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;i</span> <span class=\"na\">class=</span><span class=\"s\">\"el-icon-caret-top\"</span> <span class=\"err\">@</span><span class=\"na\">click=</span><span class=\"s\">\"scrollTop\"</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/transition&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/template&gt;</span>\n\n<span class=\"nt\">&lt;script </span><span class=\"na\">lang=</span><span class=\"s\">\"babel\"</span><span class=\"nt\">&gt;</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// search.vueからデータを受け取る</span>\n  <span class=\"na\">props</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'lists'</span><span class=\"p\">,</span> <span class=\"s1\">'hasData'</span><span class=\"p\">],</span>\n  <span class=\"nx\">data</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"na\">scrollY</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">mounted</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">'scroll'</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleScroll</span><span class=\"p\">)</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ボディ部のトリミング</span>\n    <span class=\"na\">getDescription</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'...'</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\">// 現在の上部からのスクロール量取得</span>\n    <span class=\"na\">handleScroll</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">scrollY</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">scrollY</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\">// トップへスクロール</span>\n    <span class=\"na\">scrollTop</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">scrollTop</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">scrollTop</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n\n<span class=\"nt\">&lt;style&gt;</span>\n<span class=\"nc\">.clearfix</span><span class=\"nd\">:before</span><span class=\"o\">,</span>\n<span class=\"nc\">.clearfix</span><span class=\"nd\">:after</span> <span class=\"p\">{</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">table</span><span class=\"p\">;</span>\n  <span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"s1\">\"\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.clearfix</span><span class=\"nd\">:after</span> <span class=\"p\">{</span>\n  <span class=\"nl\">clear</span><span class=\"p\">:</span> <span class=\"nb\">both</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.content-style</span> <span class=\"p\">{</span>\n  <span class=\"nl\">line-height</span><span class=\"p\">:</span> <span class=\"m\">30px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.tab-style</span> <span class=\"p\">{</span>\n  <span class=\"nl\">margin-right</span><span class=\"p\">:</span> <span class=\"m\">5px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.box-card</span> <span class=\"p\">{</span>\n  <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">360px</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">15px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.col-style</span> <span class=\"p\">{</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.text</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">14px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.page-component-up</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#59bb0c</span><span class=\"p\">;</span>\n  <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">fixed</span><span class=\"p\">;</span>\n  <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">80px</span><span class=\"p\">;</span>\n  <span class=\"nl\">bottom</span><span class=\"p\">:</span> <span class=\"m\">80px</span><span class=\"p\">;</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">40px</span><span class=\"p\">;</span>\n  <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">40px</span><span class=\"p\">;</span>\n  <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">20px</span><span class=\"p\">;</span>\n  <span class=\"nl\">cursor</span><span class=\"p\">:</span> <span class=\"nb\">pointer</span><span class=\"p\">;</span>\n  <span class=\"nl\">transition</span><span class=\"p\">:</span> <span class=\"m\">.3s</span><span class=\"p\">;</span>\n  <span class=\"nl\">box-shadow</span><span class=\"p\">:</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">6px</span> <span class=\"n\">rgba</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"m\">.12</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.page-component-up</span> <span class=\"nt\">i</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#fff</span><span class=\"p\">;</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span>\n  <span class=\"nl\">line-height</span><span class=\"p\">:</span> <span class=\"m\">40px</span><span class=\"p\">;</span>\n  <span class=\"nl\">text-align</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">18px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">a</span><span class=\"nd\">:link</span><span class=\"o\">,</span> <span class=\"nt\">a</span><span class=\"nd\">:visited</span> <span class=\"p\">{</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#59bb0c</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">a</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#3b8070</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">&lt;/style&gt;</span>\n</pre></div>\n</div>\n\n<p>検索から受け取ったデータ'lists'と'hasData'を見ることにより<br>\n検索結果が0件だった場合は「No results found for your keyword.」と表示させます。<br>\n<a href=\"https://camo.qiitausercontent.com/44c133051eb695e91bde0d41a7c7161f66b7c62a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f36323866393735352d626431632d306533302d343039392d6431323935373535363739662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/44c133051eb695e91bde0d41a7c7161f66b7c62a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f36323866393735352d626431632d306533302d343039392d6431323935373535363739662e706e67\" alt=\"ss4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/194902/628f9755-bd1c-0e30-4099-d1295755679f.png\"></a></p>\n\n<h1>\n<span id=\"ビルド\" class=\"fragment\"></span><a href=\"#%E3%83%93%E3%83%AB%E3%83%89\"><i class=\"fa fa-link\"></i></a>ビルド</h1>\n\n<p>全て作成したら、静的ファイルを生成します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>yarn run generate\n</pre></div></div>\n\n<p>以上で完成です！</p>\n\n<h1>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h1>\n\n<p>コンポーネント間のデータの受け渡しやリスト、イベントハンドリングなど、基本的な操作は体験できたと思います。</p>\n\n<p>vue.jsは画面で行われる処理が分かりやすいと感じました。</p>\n\n<p>試しに検索で使ってもらえると嬉しいです：）</p>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<ul>\n<li><a href=\"https://alligator.io/vuejs/rest-api-axios/\" rel=\"nofollow noopener\" target=\"_blank\">Vue.js REST API Consumption with Axios</a></li>\n<li><a href=\"https://qiita.com/sygnas/items/7eac9491b37a1bcba0cb\" id=\"reference-305eb27ff8b57259ef39\">Vue.js初心者向け：Vue.jsとaxiosでJsonを取得してコンポーネントに反映するメモ</a></li>\n<li><a href=\"https://www.sitepoint.com/fetching-data-third-party-api-vue-axios/\" rel=\"nofollow noopener\" target=\"_blank\">Fetching Data from a Third-Party API with Vue.js and Axios</a></li>\n<li><a href=\"https://stackoverflow.com/questions/42129534/vuejs-how-to-output-a-comma-separated-array\" rel=\"nofollow noopener\" target=\"_blank\">VueJS: How to output a comma separated array?</a></li>\n<li><a href=\"https://github.com/ElemeFE/element/issues/6840\" rel=\"nofollow noopener\" target=\"_blank\">Popover is invalid in the step bar · Issue #6840 · ElemeFE/element</a></li>\n<li><a href=\"http://element.eleme.io/#/en-US/component/form#validation\" rel=\"nofollow noopener\" target=\"_blank\">Element-validation</a></li>\n<li><a href=\"http://chibinowa.net/note/vuejs/vue-4.html\" rel=\"nofollow noopener\" target=\"_blank\">Vue.js のコンポーネントと親子間データの送受信</a></li>\n<li><a href=\"https://medium.com/pixelgram/nuxt-js-element-2-%E7%B3%BB%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC-9297bad6a12\" rel=\"nofollow noopener\" target=\"_blank\">Nuxt.js+Element@2.*系でのエラー</a></li>\n<li><a href=\"https://qiita.com/SatoTakumi/items/d88df8afae82c53d2d2a\" id=\"reference-4b17054b99c81fad2b17\">Vue.jsでスクロールを検知する</a></li>\n<li><a href=\"https://qiita.com/devneko/items/afe12b8acaf9648ccbb6\" id=\"reference-71d8dfdeee8718613de6\">Nuxt.jsの本格導入で遠回りしないためのTips v1.1</a></li>\n<li><a href=\"https://qiita.com/ainehanta/items/8918593f3a28dfb25ddf\" id=\"reference-bd62c523e6763a47f8e0\">Nuxt.jsとMDLで静的サイトを作る</a></li>\n<li><a href=\"https://github.com/ElemeFE/element/issues/6141\" rel=\"nofollow noopener\" target=\"_blank\">[Bug Report]When you have only one el-input in el-form, press enter on input will submit the form · Issue #6141 · ElemeFE/element</a></li>\n<li><a href=\"https://fiahfy.blogspot.jp/2017/12/nuxtjs-github-pages.html\" rel=\"nofollow noopener\" target=\"_blank\">Nuxt.js を GitHub Pages で使う</a></li>\n</ul>\n\n<h1>\n<span id=\"ソースコード\" class=\"fragment\"></span><a href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>ソースコード</h1>\n\n<p><a href=\"https://github.com/aytdm/hello-nuxt\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/aytdm/hello-nuxt</a></p>\n",
    "body": "初めまして、こんにちは。\nNuxt.jsの記事を書いていたところ、空きを見つけたので参加登録しました。\n遅れての参加なので、もし問題があればご指摘ください。\n\n# はじめに\n\nNuxt.js（vue.js）の勉強がてらQiita APIを使って投稿一覧サービスを作りました。\nプロジェクト作成から静的サイトを生成までをまとめたいと思います。\n\n何かお気づきの点あればアドバイス頂けると嬉しいです:bow_tone1:\n\n![ss.png](https://qiita-image-store.s3.amazonaws.com/0/194902/d17c8646-0079-8759-3f82-eba546df1ba4.png)\n\n[デモ](https://aytdm.github.io/hello-nuxt/search) （PCでの操作を推奨）\n\n# モジュールのバージョン\n使用するモジュールのバーションは以下の通りです。\n\n~~~\n\"nuxt\": \"^1.0.0-rc11\",\n\"axios\": \"^0.17.1\",\n\"element-ui\": \"^2.0.8\"\n~~~\n\n# 使用するAPI\nQiita API v2の[投稿](https://qiita.com/api/v2/docs#%E6%8A%95%E7%A8%BF)を使用します。\n未認証でも（IPアドレスごとに）1時間に60回までリクエストを送れるので、未認証でコールします。\n\n# プロジェクトの作成\n[スターターテンプレート](https://ja.nuxtjs.org/guide/installation)からプロジェクトを作成します。\nプロジェクト名は「hello-nuxt」としました。\n\n~~~\n$ vue init nuxt-community/starter-template hello-nuxt\n$ cd hello-nuxt\n$ yarn install\n~~~\n\n今回はUIライブラリに[element-ui](http://element.eleme.io/#/en-US)、Ajax通信ライブラリに[axios](https://github.com/axios/axios)を使うため\nそれぞれインストールします。\n\n~~~\n$ yarn add axios element-ui\n~~~\n\n# 設定\nnuxt.config.jsでサイトの設定を行います。\n＃headやローディング部分は手を加えていないので省略しています。\n\n~~~javascript:nuxt.config.js\nmodule.exports = {\n  plugins: ['~plugins/element-ui', { src: '~plugins/element-ui', ssr: false }],\n  css: ['element-ui/lib/theme-chalk/index.css'],\n  /*\n  ** Build configuration\n  */\n  build: {\n    vendor: ['axios', 'element-ui'],\n    /*\n    ** Run ESLint on save\n    */\n    extend (config, ctx) {\n      if (ctx.dev && ctx.isClient) {\n        config.module.rules.push({\n          enforce: 'pre',\n          test: /\\.(js|vue)$/,\n          loader: 'eslint-loader',\n          exclude: /(node_modules)/\n        })\n      }\n      config.module.rules = config.module.rules.map((rule) => {\n        if (rule.loader === 'babel-loader') {\n          rule.exclude = /node_modules/\n        }\n        return rule\n      })\n    }\n  }\n}\n~~~\n`cssプロパティ`で設定したファイルはグローバルに適用されるため、ここにelement-uiを指定します。\nまた、プラグインとして定義するため、`pluginsプロパティ`にも指定します。\n（pluginsプロパティに指定したelement-ui用のプラグインは後ほど作成）\n\n`buildプロパティ`の`extend`には、babelやeslintの適用除外のディレクトリを指定します。\nさらに`buildプロパティ`の`vendor`にaxiosとelement-uiを指定し、全体のサイズをコンパクトにします。\n\nこれで設定は完了です。\n\n# プラグインの作成\nnuxt.config.jsで指定したelement-ui用のプラグインを作成します。\nplugins下にelement-ui.jsを作成します。\n\n~~~javascript:plugins/element-ui.js\nimport Vue from 'vue'\n\nconst ElementUI = require('element-ui')\nconst locale = require('element-ui/lib/locale/lang/ja')\nVue.use(ElementUI, { locale })\n~~~\n\n# レイアウト・コンポーネントの作成\n\n## レイアウト\nヘッダーとコンテンツ（検索、投稿一覧）、フッターのレイアウトを作ります。\n＃本当はページネーションも作りたかったのですが、レスポンスヘッダーの「Total-Count」等が取得できないため割愛しました。\n\n【イメージ図】\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/194902/068afa68-8811-66a1-4f9e-6968ce7bfac1.png\" width=65%>\n※以下、図中の言葉を見出しに使います。\n\nlayouts下にnavbar.vueを作成します。\n\n~~~html:layouts/navbar.vue\n<template>\n  <div>\n    <my-header />\n    <nuxt />\n    <my-footer />\n  </div>\n</template>\n\n<script>\nimport MyHeader from '~/components/Header.vue'\nimport MyFooter from '~/components/Footer.vue'\nexport default {\n  name: 'navbar',\n  components: {\n    MyHeader,\n    MyFooter\n  }\n}\n</script>\n~~~\n\n## コンポーネント\n### ヘッダー、フッター\ncomponents下にHeader.vue、Footer.vueを作成します。\nヘッダー、フッターはシンプルに背景色はQiitaカラーで(〃'ω')\n\n~~~html:components/Header.vue\n<template>\n  <div class=\"header\">\n    <b><nuxt-link to=\"/\">Hello Qiita with Nuxt.js ＼＼\\\\ ٩(*'ω'*)و //／／</nuxt-link></b>\n  </div>\n</template>\n\n<style>\n.header {\n    font-size: 20px;\n    left: 0;\n    top: 0;\n    width: 100%;\n    background-color: #59bb0c;\n    color: #fff;\n    text-align: left;\n    padding: 15px;\n}\n\n.header a {\n    text-decoration: none;\n}\n\n.header a:visited {\n    color: #fff;\n}\n</style>\n~~~\n\n~~~html:components/Footer.vue\n<template>\n  <div class=\"footer\">\n  </div>\n</template>\n\n<style>\n.footer {\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    height: 61px;\n    background-color: #59bb0c;\n    color: white;\n    text-align: center;\n}\n</style>\n~~~\n\n### 検索\npages/search.vueを作成します。\nsearch.vueではページ表示時にQiitaのAPIをコールする機能と検索画面に入力されたキーワードを元に\nQiitaのAPIをコールする機能、入力値のバリデーション機能を持ちます。\n\n~~~html:pages/search.vue\n<template>\n  <div>\n    <el-container>\n      <el-main>\n        <!-- 検索フォーム -->\n        <el-form :inline=\"true\" :model=\"searchForm\" ref=\"searchForm\" :rules=\"rules\" @submit.native.prevent>\n          <el-form-item prop=\"keyword\">\n            <el-input placeholder=\"search by keyword\" prefix-icon=\"el-icon-search\" v-model=\"searchForm.keyword\"  @keyup.enter.native=\"search('searchForm')\" />\n          </el-form-item>\n          <el-form-item>\n            <el-button @click=\"search('searchForm')\">search</el-button>\n          </el-form-item>\n        </el-form>\n        <!-- 投稿一覧 -->\n        <my-list :lists=\"mylist\" :hasData=\"hasData\" />\n      </el-main>\n    </el-container>\n  </div>\n</template>\n\n<script lang=\"babel\">\nimport axios from 'axios'\nimport MyList from '~/components/List.vue'\nconst BASE_URL = 'https://qiita.com/api/v2/'\nexport default {\n  layout: 'navbar',\n  components: {\n    // 投稿一覧を表示するコンポーネント\n    MyList\n  },\n  data () {\n    return {\n      // 検索フォーム\n      searchForm: {\n        keyword: ''\n      },\n      // バリデーションルール\n      rules: {\n        keyword: [\n          { required: true, message: 'Please input the keyword', trigger: 'blur' }\n        ]\n      },\n      mylist: [],\n      hasData: true\n    }\n  },\n  created () {\n    // 初回ページ描画時にキーワード「nuxt.js」でQiitaのAPIをコール\n    this.searchForm.keyword = 'nuxt.js'\n    this.sendRequest()\n    this.searchForm.keyword = ''\n  },\n  methods: {\n    // キーワード検索時に呼ばれるメソッド。バリデーション含む\n    search (form) {\n      this.$refs[form].validate((valid) => {\n        if (!valid) {\n          return false\n        }\n        this.sendRequest()\n      })\n    },\n    // リクエスト送信\n    sendRequest () {\n      axios.get(BASE_URL + 'items', {\n        headers: {'Content-Type': 'application/json'},\n        params: {\n          page: 1,\n          per_page: 20,\n          query: this.searchForm.keyword\n        }\n      })\n        .then(response => {\n          if (response.data.length === 0) {\n            this.hasData = false\n          }\n          this.mylist = response.data\n        })\n        .catch(e => {\n          console.error('error:', e)\n        })\n    }\n  }\n}\n</script>\n\n<style>\n.el-form {\n  margin-top: 1em;\n  margin-left: 1em;\n}\n</style>\n~~~\n\nバリデーションでは空入力であるかどうかのみチェックを行っています。\n![ss5.png](https://qiita-image-store.s3.amazonaws.com/0/194902/b1c89dc4-99f7-3673-8142-3252f292a832.png)\n\n\n### 投稿一覧\ncomponents下にList.vueを作成します。\nList.vueは検索からQiita APIのレスポンスを受け取り、element-uiの[カード](http://element.eleme.io/#/en-US/component/card)で描画を行うコンポーネントです。\n他にページトップへ遷移する機能を持ちます。\n\n~~~html:components/List.vue\n<template>\n<div>\n  <!-- 検索結果が0件だった場合 -->\n  <div v-if=\"lists.length === 0 && !hasData\">\n    <i class=\"el-icon-warning\">&nbsp;No results found for your keyword.</i>\n  </div>\n  <!-- 投稿一覧 -->\n  <div v-else>\n    <el-col :span=\"6\" v-for=\"(element, index) in lists\" :key=\"index\" class=\"col-style\">\n      <el-card :body-style=\"{ padding: '15px' }\" class=\"box-card\">\n        <div slot=\"header\" class=\"clearfix\">\n          <a :href=\"element.url\" target=\"_blank\">{{ element.title }}</a>\n        </div>\n        <div class=\"bottom clearfix content-style text\">\n          <div>{{ element.created_at }}</div>\n          <span>\n            <img :src=\"element.user.profile_image_url\" width=\"15\" height=\"15\" />\n            <!-- 自己紹介があればPopoverで表示 -->\n            <template v-if=\"element.user.description\">\n              <el-popover slot=\"description\" placement=\"top-start\" width=\"300\" trigger=\"hover\" :content=\"element.user.description\">\n                <span slot=\"reference\">&nbsp;{{ element.user.id }}</span>\n              </el-popover>\n            </template>\n            <template v-else>\n              <span>&nbsp;{{ element.user.id }}</span>\n            </template>\n          </span>\n          &nbsp;\n          <span>\n            <i class=\"el-icon-star-off\">{{ element.likes_count }}</i>\n          </span>\n          <div>{{ getDescription(element.body) }}</div>\n          <el-tag size=\"mini\" type=\"info\" class=\"tab-style\" v-for=\"(tag, index) in element.tags\" :key=\"index\">{{ tag.name }}</el-tag>\n        </div>\n      </el-card>\n    </el-col>\n    <!-- ページトップへスクロール用のボタン -->\n    <div v-if=\"250 < scrollY\" class=\"page-component-up\">\n      <transition name=\"fade\">\n        <i class=\"el-icon-caret-top\" @click=\"scrollTop\" />\n      </transition>\n    </div>\n  </div>\n</div>\n</template>\n\n<script lang=\"babel\">\nexport default {\n  // search.vueからデータを受け取る\n  props: ['lists', 'hasData'],\n  data () {\n    return {\n      scrollY: 0\n    }\n  },\n  mounted () {\n    window.addEventListener('scroll', this.handleScroll)\n  },\n  methods: {\n    // ボディ部のトリミング\n    getDescription: function (body) {\n      return body.slice(0, 100) + '...'\n    },\n    // 現在の上部からのスクロール量取得\n    handleScroll: function () {\n      this.scrollY = window.scrollY\n    },\n    // トップへスクロール\n    scrollTop: function () {\n      document.body.scrollTop = 0\n      document.documentElement.scrollTop = 0\n    }\n  }\n}\n</script>\n\n<style>\n.clearfix:before,\n.clearfix:after {\n  display: table;\n  content: \"\";\n}\n\n.clearfix:after {\n  clear: both\n}\n\n.content-style {\n  line-height: 30px;\n}\n\n.tab-style {\n  margin-right: 5px;\n}\n\n.box-card {\n  height: 360px;\n  font-size: 15px;\n}\n\n.col-style {\n  padding: 10px;\n}\n\n.text {\n  font-size: 14px;\n}\n\n.page-component-up {\n  background-color: #59bb0c;\n  position: fixed;\n  right: 80px;\n  bottom: 80px;\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  cursor: pointer;\n  transition: .3s;\n  box-shadow: 0 0 6px rgba(0,0,0,.12);\n}\n\n.page-component-up i {\n  color: #fff;\n  display: block;\n  line-height: 40px;\n  text-align: center;\n  font-size: 18px;\n}\n\na:link, a:visited {\n    color: #59bb0c;\n}\n\na:hover {\n    color: #3b8070;\n}\n</style>\n~~~\n\n検索から受け取ったデータ'lists'と'hasData'を見ることにより\n検索結果が0件だった場合は「No results found for your keyword.」と表示させます。\n![ss4.png](https://qiita-image-store.s3.amazonaws.com/0/194902/628f9755-bd1c-0e30-4099-d1295755679f.png)\n\n# ビルド\n全て作成したら、静的ファイルを生成します。\n\n~~~\nyarn run generate\n~~~\n\n以上で完成です！\n\n# 最後に\nコンポーネント間のデータの受け渡しやリスト、イベントハンドリングなど、基本的な操作は体験できたと思います。\n\nvue.jsは画面で行われる処理が分かりやすいと感じました。\n\n試しに検索で使ってもらえると嬉しいです：）\n\n# 参考\n* [Vue.js REST API Consumption with Axios](https://alligator.io/vuejs/rest-api-axios/)\n* [Vue.js初心者向け：Vue.jsとaxiosでJsonを取得してコンポーネントに反映するメモ](https://qiita.com/sygnas/items/7eac9491b37a1bcba0cb)\n* [Fetching Data from a Third-Party API with Vue.js and Axios](https://www.sitepoint.com/fetching-data-third-party-api-vue-axios/)\n* [VueJS: How to output a comma separated array?](https://stackoverflow.com/questions/42129534/vuejs-how-to-output-a-comma-separated-array)\n* [Popover is invalid in the step bar · Issue #6840 · ElemeFE/element](https://github.com/ElemeFE/element/issues/6840)\n* [Element-validation](http://element.eleme.io/#/en-US/component/form#validation)\n* [Vue.js のコンポーネントと親子間データの送受信](http://chibinowa.net/note/vuejs/vue-4.html)\n* [Nuxt.js+Element@2.*系でのエラー](https://medium.com/pixelgram/nuxt-js-element-2-%E7%B3%BB%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC-9297bad6a12)\n* [Vue.jsでスクロールを検知する](https://qiita.com/SatoTakumi/items/d88df8afae82c53d2d2a)\n* [Nuxt.jsの本格導入で遠回りしないためのTips v1.1](https://qiita.com/devneko/items/afe12b8acaf9648ccbb6)\n* [Nuxt.jsとMDLで静的サイトを作る](https://qiita.com/ainehanta/items/8918593f3a28dfb25ddf)\n* [[Bug Report]When you have only one el-input in el-form, press enter on input will submit the form · Issue #6141 · ElemeFE/element](https://github.com/ElemeFE/element/issues/6141)\n* [Nuxt.js を GitHub Pages で使う](https://fiahfy.blogspot.jp/2017/12/nuxtjs-github-pages.html)\n\n\n# ソースコード\nhttps://github.com/aytdm/hello-nuxt\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-12-28T09:57:53+09:00",
    "group": null,
    "id": "0096e497837ec3aa8b35",
    "likes_count": 45,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "QiitaAPI",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "nuxt.js",
        "versions": []
      },
      {
        "name": "ElementUI",
        "versions": []
      }
    ],
    "title": "Nuxt.jsでQiita投稿一覧サービスを作る",
    "updated_at": "2017-12-28T11:09:51+09:00",
    "url": "https://qiita.com/aytdm/items/0096e497837ec3aa8b35",
    "user": {
      "description": "気になったことは取りあえずやってみるタイプ",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": "aytdm",
      "id": "aytdm",
      "items_count": 2,
      "linkedin_id": "",
      "location": "Tokyo, Japan",
      "name": "numa",
      "organization": "",
      "permanent_id": 194902,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/194902/profile-images/1525876229",
      "twitter_screen_name": null,
      "website_url": "https://aytdm.com"
    },
    "page_views_count": null
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h1>\n\n<p><a href=\"https://github.com/line/line-bot-sdk-java\" rel=\"nofollow noopener\" target=\"_blank\">LINE Messaging API SDK（for Java）</a>を使ってごみ収集日前にリマインドを送ります。</p>\n\n<h2>\n<span id=\"構想\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E6%83%B3\"><i class=\"fa fa-link\"></i></a>構想</h2>\n\n<ul>\n<li>Springのスケジュール機能(cron)を使って、指定の曜日/時間にリマインドをプッシュ</li>\n<li>ごみ捨てが終わっていたら褒め、まだ終わっていなかったら捨てようねと励ます<strong>（大事）</strong>\n</li>\n</ul>\n\n<p>レスポンスに応対する箇所は「Webhook」、リマインドをプッシュする箇所は「Messaging API」で実現します。</p>\n\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<ul>\n<li>jdk1.8</li>\n<li>Spring Boot</li>\n<li>Heroku</li>\n</ul>\n\n<p>※別途<a href=\"https://www.heroku.com/\" rel=\"nofollow noopener\" target=\"_blank\">heroku</a>でアプリケーションの作成、<a href=\"https://developers.line.me/ja/\" rel=\"nofollow noopener\" target=\"_blank\">LINE</a>でチャンネルの作成、Webhookの有効化、Webhookのurlの登録が必要です。</p>\n\n<h1>\n<span id=\"プロジェクトの作成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクトの作成</h1>\n\n<p>「<a href=\"http://start.spring.io/\" rel=\"nofollow noopener\" target=\"_blank\">SPRING INITIALIZR</a>」でプロジェクトを作成します。<br>\n「lombok」、「Devtool」にチェックを入れます。Artifactは「garbage-reminder」としました。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/ef0d3f19e64a679a1858c076ca546895d5fd444c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f64646362656164622d363034652d356362302d623638302d6634653533373561643434342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/ef0d3f19e64a679a1858c076ca546895d5fd444c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f64646362656164622d363034652d356362302d623638302d6634653533373561643434342e706e67\" alt=\"init.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/194902/ddcbeadb-604e-5cb0-b680-f4e5375ad444.png\"></a></p>\n\n<p>ダウンロードが完了したらIDEで開きます。</p>\n\n<h1>\n<span id=\"依存関係の追加\" class=\"fragment\"></span><a href=\"#%E4%BE%9D%E5%AD%98%E9%96%A2%E4%BF%82%E3%81%AE%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>依存関係の追加</h1>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">pom.xml</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.linecorp.bot<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>line-bot-spring-boot<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.11.0<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</pre></div>\n</div>\n\n<p>LINE Messaging API SDKを追加します。</p>\n\n<h1>\n<span id=\"プロパティ\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\"><i class=\"fa fa-link\"></i></a>プロパティ</h1>\n\n<div class=\"code-frame\" data-lang=\"properties\">\n<div class=\"code-lang\"><span class=\"bold\">application.properties</span></div>\n<div class=\"highlight\"><pre><span class=\"py\">line.bot.channelSecret</span> <span class=\"p\">=</span> <span class=\"s\">XXXXX</span>\n<span class=\"py\">line.bot.channelToken</span> <span class=\"p\">=</span> <span class=\"s\">XXXXX</span>\n<span class=\"py\">line.bot.handler.path</span> <span class=\"p\">=</span> <span class=\"s\">/callback</span>\n</pre></div>\n</div>\n\n<p>LINEで開設したチャンネルの情報を設定します。</p>\n\n<h1>\n<span id=\"メッセージプッシュの実装\" class=\"fragment\"></span><a href=\"#%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AE%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>メッセージプッシュの実装</h1>\n\n<p><a href=\"https://camo.qiitausercontent.com/c9fac1967a9bf5b5389aced9a26f3ef6ccde3b27/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f33653662323566302d653265642d666562322d346133642d3036636133343765376639352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/c9fac1967a9bf5b5389aced9a26f3ef6ccde3b27/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f33653662323566302d653265642d666562322d346133642d3036636133343765376639352e706e67\" alt=\"confirm.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/194902/3e6b25f0-e2ed-feb2-4a3d-06ca347e7f95.png\"></a><br>\nごみ出しが完了したか確認するため、<a href=\"https://developers.line.me/ja/docs/messaging-api/message-types/#confirm-template\" rel=\"nofollow noopener\" target=\"_blank\">確認テンプレート</a>を使用します。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">PushConfirmController</span></div>\n<div class=\"highlight\"><pre><span class=\"nd\">@Slf4j</span>\n<span class=\"nd\">@RestController</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">PushConfirmController</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">LineMessagingClient</span> <span class=\"n\">lineMessagingClient</span><span class=\"o\">;</span>\n\n    <span class=\"n\">ConfirmService</span><span class=\"o\">(</span><span class=\"n\">LineMessagingClient</span> <span class=\"n\">lineMessagingClient</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">lineMessagingClient</span> <span class=\"o\">=</span> <span class=\"n\">lineMessagingClient</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">//リマインドをプッシュ</span>\n    <span class=\"nd\">@GetMapping</span><span class=\"o\">(</span><span class=\"s\">\"alarm\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">pushAlarm</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">URISyntaxException</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">BotApiResponse</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">lineMessagingClient</span>\n                                            <span class=\"o\">.</span><span class=\"na\">pushMessage</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">PushMessage</span><span class=\"o\">(</span><span class=\"s\">\"/* プッシュしたい人のuserId */\"</span><span class=\"o\">,</span>\n                                                         <span class=\"k\">new</span> <span class=\"nf\">TemplateMessage</span><span class=\"o\">(</span><span class=\"s\">\"明日は燃えるごみの日だよ！\"</span><span class=\"o\">,</span>\n                                                                 <span class=\"k\">new</span> <span class=\"nf\">ConfirmTemplate</span><span class=\"o\">(</span><span class=\"s\">\"ごみ捨ては終わった？\"</span><span class=\"o\">,</span>\n                                                                         <span class=\"k\">new</span> <span class=\"nf\">MessageAction</span><span class=\"o\">(</span><span class=\"s\">\"はい\"</span><span class=\"o\">,</span> <span class=\"s\">\"はい\"</span><span class=\"o\">),</span>\n                                                                         <span class=\"k\">new</span> <span class=\"nf\">MessageAction</span><span class=\"o\">(</span><span class=\"s\">\"いいえ\"</span><span class=\"o\">,</span> <span class=\"s\">\"いいえ\"</span><span class=\"o\">)</span>\n                                                                 <span class=\"o\">)</span>\n                                                         <span class=\"o\">)))</span>\n                                            <span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">();</span>\n            <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"s\">\"Sent messages: {}\"</span><span class=\"o\">,</span> <span class=\"n\">response</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"o\">|</span> <span class=\"n\">ExecutionException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>コントローラ化する必要はありませんが、GETで呼び出せるようにすると確認が楽です。</p>\n\n<h3>\n<span id=\"確認\" class=\"fragment\"></span><a href=\"#%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>確認</h3>\n\n<p>通知<br>\n<a href=\"https://camo.qiitausercontent.com/e5c1326c91b1c92e13b4d7e8d9f56c1f1728070f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f39393736303537352d616330632d613830342d363262612d3237393134316235353133302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e5c1326c91b1c92e13b4d7e8d9f56c1f1728070f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f39393736303537352d616330632d613830342d363262612d3237393134316235353133302e706e67\" alt=\"\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/194902/99760575-ac0c-a804-62ba-279141b55130.png\"></a></p>\n\n<p>メッセージ<br>\n<a href=\"https://camo.qiitausercontent.com/57230a6169b3a0dd99bac6e9176050fc49257e61/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f37393630323066352d333231322d323963362d316262622d6265653136363330336539322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/57230a6169b3a0dd99bac6e9176050fc49257e61/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f37393630323066352d333231322d323963362d316262622d6265653136363330336539322e706e67\" alt=\"\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/194902/796020f5-3212-29c6-1bbb-bee166303e92.png\"></a></p>\n\n<p>レスポンス未実装のため、ボタンを押してもまだ返答はありません。</p>\n\n<h1>\n<span id=\"レスポンスの実装\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AE%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>レスポンスの実装</h1>\n\n<p>Webhookはメッセージやスタンプなど何か送られた際に応答を返すことができます。<br>\n確認で「はい」もしくは「いいえ」が返却されるようにしたので、この２つのワードを拾い<br>\n「はい」の場合は「さっすがー！」と返し、「いいえ」の場合は「捨てにいきましょー！」と返すようにします。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Webhook</span></div>\n<div class=\"highlight\"><pre><span class=\"nd\">@Slf4j</span>\n<span class=\"nd\">@LineMessageHandler</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">WebhookController</span> <span class=\"o\">{</span>\n\n    <span class=\"c1\">//テキストが送られてきた際の応答</span>\n    <span class=\"nd\">@EventMapping</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">handleTextMessageEvent</span><span class=\"o\">(</span><span class=\"n\">MessageEvent</span><span class=\"o\">&lt;</span><span class=\"n\">TextMessageContent</span><span class=\"o\">&gt;</span> <span class=\"n\">event</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">Exception</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">//入力されたテキストの取得</span>\n        <span class=\"n\">String</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"na\">getText</span><span class=\"o\">();</span>\n\n        <span class=\"k\">switch</span> <span class=\"o\">(</span><span class=\"n\">text</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"はい\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">reply</span><span class=\"o\">(</span><span class=\"n\">replyToken</span><span class=\"o\">,</span>\n                        <span class=\"k\">new</span> <span class=\"nf\">TextMessage</span><span class=\"o\">(</span><span class=\"s\">\"さっすがー！\"</span><span class=\"o\">)</span>\n                <span class=\"o\">);</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">case</span> <span class=\"s\">\"いいえ\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">reply</span><span class=\"o\">(</span><span class=\"n\">replyToken</span><span class=\"o\">,</span>\n                        <span class=\"k\">new</span> <span class=\"nf\">TextMessage</span><span class=\"o\">(</span><span class=\"s\">\"捨てにいきましょー！\"</span><span class=\"o\">)</span>\n                <span class=\"o\">);</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">default</span><span class=\"o\">:</span>\n                <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"s\">\"Returns echo message {}: {}\"</span><span class=\"o\">,</span> <span class=\"n\">replyToken</span><span class=\"o\">,</span> <span class=\"n\">text</span><span class=\"o\">);</span>\n                <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">replyText</span><span class=\"o\">(</span>\n                        <span class=\"n\">replyToken</span><span class=\"o\">,</span>\n                        <span class=\"n\">text</span>\n                <span class=\"o\">);</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"確認-1\" class=\"fragment\"></span><a href=\"#%E7%A2%BA%E8%AA%8D-1\"><i class=\"fa fa-link\"></i></a>確認</h3>\n\n<p><a href=\"https://camo.qiitausercontent.com/6e73fdb1484d0151466e06b20b659e9f9483e3b1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f61656433663231332d643262342d376430372d633234352d3365663737343835346339382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6e73fdb1484d0151466e06b20b659e9f9483e3b1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f61656433663231332d643262342d376430372d633234352d3365663737343835346339382e706e67\" alt=\"\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/194902/aed3f213-d2b4-7d07-c245-3ef774854c98.png\"></a></p>\n\n<h1>\n<span id=\"備考\" class=\"fragment\"></span><a href=\"#%E5%82%99%E8%80%83\"><i class=\"fa fa-link\"></i></a>備考</h1>\n\n<h2>\n<span id=\"レスポンス\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9\"><i class=\"fa fa-link\"></i></a>レスポンス</h2>\n\n<p>例ではテキストを返していますが、メッセージは配列で複数設定することができます。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">reply</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">reply</span><span class=\"o\">(</span><span class=\"n\">replyToken</span><span class=\"o\">,</span>\n            <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span>\n                <span class=\"k\">new</span> <span class=\"nf\">StickerMessage</span><span class=\"o\">(</span><span class=\"s\">\"1\"</span><span class=\"o\">,</span> <span class=\"s\">\"13\"</span><span class=\"o\">),</span>    <span class=\"c1\">//スタンプ</span>\n                <span class=\"k\">new</span> <span class=\"nf\">TextMessage</span><span class=\"o\">(</span><span class=\"s\">\"さっすがー！\"</span><span class=\"o\">)</span>    <span class=\"c1\">//テキスト</span>\n            <span class=\"o\">)</span>\n<span class=\"o\">);</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"環境変数\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0\"><i class=\"fa fa-link\"></i></a>環境変数</h2>\n\n<p>環境変数をherokuに持たせ、その値をプロパティファイルから参照することができます。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/b60085f3fa6a3d508b7f4564db6d1bf43c29dd10/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f30616638313930312d326465372d343734352d333736342d3261336161646163326662642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b60085f3fa6a3d508b7f4564db6d1bf43c29dd10/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3139343930322f30616638313930312d326465372d343734352d333736342d3261336161646163326662642e706e67\" alt=\"ss.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/194902/0af81901-2de7-4745-3764-2a3aadac2fbd.png\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"properties\">\n<div class=\"code-lang\"><span class=\"bold\">application.properties</span></div>\n<div class=\"highlight\"><pre><span class=\"py\">line.bot.channelSecret</span> <span class=\"p\">=</span> <span class=\"s\">${LINE_BOT_CHANNEL_SECRET}</span>\n<span class=\"py\">line.bot.channelToken</span> <span class=\"p\">=</span> <span class=\"s\">${LINE_BOT_CHANNEL_TOKEN}</span>\n<span class=\"py\">line.bot.handler.path</span> <span class=\"p\">=</span> <span class=\"s\">/callback</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"スケジューリング\" class=\"fragment\"></span><a href=\"#%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0\"><i class=\"fa fa-link\"></i></a>スケジューリング</h1>\n\n<p>ここまで来れば、あとは定刻にプッシュさせるだけです！<br>\nSpringのスケジュール機能<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html\" rel=\"nofollow noopener\" target=\"_blank\">@Scheduled</a>を利用します。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">ScheduledTask</span></div>\n<div class=\"highlight\"><pre><span class=\"nd\">@Slf4j</span>\n<span class=\"nd\">@Service</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ScheduledTaskService</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">SimpleDateFormat</span> <span class=\"n\">sdf</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">SimpleDateFormat</span><span class=\"o\">(</span><span class=\"s\">\"HH:mm:ss\"</span><span class=\"o\">);</span>\n\n    <span class=\"nd\">@Scheduled</span><span class=\"o\">(</span><span class=\"n\">cron</span><span class=\"o\">=</span><span class=\"s\">\"/* cronの記述 */\"</span><span class=\"o\">,</span> <span class=\"n\">zone</span> <span class=\"o\">=</span> <span class=\"s\">\"Asia/Tokyo\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">executeAlarm</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"c1\">//プッシュする処理を呼び出す</span>\n            <span class=\"n\">pushAlarm</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">URISyntaxException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">error</span><span class=\"o\">(</span><span class=\"s\">\"{}\"</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"s\">\"cron executed : \"</span> <span class=\"o\">+</span> <span class=\"n\">sdf</span><span class=\"o\">.</span><span class=\"na\">format</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Date</span><span class=\"o\">()));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>※<a href=\"/EnableScheduling\" class=\"user-mention js-hovercard\" title=\"EnableScheduling\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"EnableScheduling\">@EnableScheduling</a>アノテーションをmain関数のあるクラスにつけるのを忘れずに。</p>\n\n<p>これで完成です！</p>\n\n<h1>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h1>\n\n<p>忘れがちな ごみ出しをちょっと楽しくできるのではと思います(´ω`*)</p>\n\n<p>作るにあたり<a href=\"https://github.com/line/line-bot-sdk-java\" rel=\"nofollow noopener\" target=\"_blank\">LINE Messaging API SDK（for Java）</a>にある「kitchensink」がとても参考になりました。<br>\n最初はメッセージをプッシュする部分、SDKを使わずに自前実装してました･･･ｗ<br>\nSDKを使用した方がすっきり書けて楽ですね。</p>\n\n<p>今回は燃えるごみの日のみのアラートですが、拡張して燃えないごみの日も作れますし<br>\nメッセージを増やしてランダムでメッセージを出したり、スタンプを送信したりもできます。<br>\nオリジナルリマインダー、ぜひ作ってみてください；）</p>\n",
    "body": "#概要\n[LINE Messaging API SDK（for Java）](https://github.com/line/line-bot-sdk-java)を使ってごみ収集日前にリマインドを送ります。\n\n##構想\n+ Springのスケジュール機能(cron)を使って、指定の曜日/時間にリマインドをプッシュ\n+ ごみ捨てが終わっていたら褒め、まだ終わっていなかったら捨てようねと励ます**（大事）**\n\nレスポンスに応対する箇所は「Webhook」、リマインドをプッシュする箇所は「Messaging API」で実現します。\n\n#環境\n+ jdk1.8\n+ Spring Boot\n+ Heroku\n\n※別途[heroku](https://www.heroku.com/)でアプリケーションの作成、[LINE](https://developers.line.me/ja/)でチャンネルの作成、Webhookの有効化、Webhookのurlの登録が必要です。\n\n#プロジェクトの作成\n「[SPRING INITIALIZR](http://start.spring.io/)」でプロジェクトを作成します。\n「lombok」、「Devtool」にチェックを入れます。Artifactは「garbage-reminder」としました。\n\n![init.png](https://qiita-image-store.s3.amazonaws.com/0/194902/ddcbeadb-604e-5cb0-b680-f4e5375ad444.png)\n\nダウンロードが完了したらIDEで開きます。\n\n#依存関係の追加\n```xml:pom.xml\n<dependency>\n    <groupId>com.linecorp.bot</groupId>\n    <artifactId>line-bot-spring-boot</artifactId>\n    <version>1.11.0</version>\n</dependency>\n```\nLINE Messaging API SDKを追加します。\n\n#プロパティ\n```properties:application.properties\nline.bot.channelSecret = XXXXX\nline.bot.channelToken = XXXXX\nline.bot.handler.path = /callback\n```\nLINEで開設したチャンネルの情報を設定します。\n\n#メッセージプッシュの実装\n![confirm.png](https://qiita-image-store.s3.amazonaws.com/0/194902/3e6b25f0-e2ed-feb2-4a3d-06ca347e7f95.png)\nごみ出しが完了したか確認するため、[確認テンプレート](https://developers.line.me/ja/docs/messaging-api/message-types/#confirm-template)を使用します。\n\n```java:PushConfirmController \n@Slf4j\n@RestController\npublic class PushConfirmController {\n\n    private final LineMessagingClient lineMessagingClient;\n\n    ConfirmService(LineMessagingClient lineMessagingClient) {\n        this.lineMessagingClient = lineMessagingClient;\n    }\n\n    //リマインドをプッシュ\n    @GetMapping(\"alarm\")\n    public void pushAlarm() throws URISyntaxException {\n\n        try {\n            BotApiResponse response = lineMessagingClient\n                                            .pushMessage(new PushMessage(\"/* プッシュしたい人のuserId */\",\n                                                         new TemplateMessage(\"明日は燃えるごみの日だよ！\",\n                                                                 new ConfirmTemplate(\"ごみ捨ては終わった？\",\n                                                                         new MessageAction(\"はい\", \"はい\"),\n                                                                         new MessageAction(\"いいえ\", \"いいえ\")\n                                                                 )\n                                                         )))\n                                            .get();\n            log.info(\"Sent messages: {}\", response);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n```\nコントローラ化する必要はありませんが、GETで呼び出せるようにすると確認が楽です。\n\n###確認\n通知\n![](https://qiita-image-store.s3.amazonaws.com/0/194902/99760575-ac0c-a804-62ba-279141b55130.png)\n\nメッセージ\n![](https://qiita-image-store.s3.amazonaws.com/0/194902/796020f5-3212-29c6-1bbb-bee166303e92.png)\n\nレスポンス未実装のため、ボタンを押してもまだ返答はありません。\n\n#レスポンスの実装\nWebhookはメッセージやスタンプなど何か送られた際に応答を返すことができます。\n確認で「はい」もしくは「いいえ」が返却されるようにしたので、この２つのワードを拾い\n「はい」の場合は「さっすがー！」と返し、「いいえ」の場合は「捨てにいきましょー！」と返すようにします。\n\n```java:Webhook\n@Slf4j\n@LineMessageHandler\npublic class WebhookController {\n\n    //テキストが送られてきた際の応答\n    @EventMapping\n    public void handleTextMessageEvent(MessageEvent<TextMessageContent> event) throws Exception {\n\n        //入力されたテキストの取得\n        String text = content.getText();\n\n        switch (text) {\n            case \"はい\": {\n                this.reply(replyToken,\n                        new TextMessage(\"さっすがー！\")\n                );\n                break;\n            }\n            case \"いいえ\": {\n                this.reply(replyToken,\n                        new TextMessage(\"捨てにいきましょー！\")\n                );\n                break;\n            }\n            default:\n                log.info(\"Returns echo message {}: {}\", replyToken, text);\n                this.replyText(\n                        replyToken,\n                        text\n                );\n                break;\n        }\n    }\n}\n```\n###確認\n![](https://qiita-image-store.s3.amazonaws.com/0/194902/aed3f213-d2b4-7d07-c245-3ef774854c98.png)\n\n#備考\n##レスポンス\n例ではテキストを返していますが、メッセージは配列で複数設定することができます。\n\n```java:reply\nthis.reply(replyToken,\n            Arrays.asList(\n                new StickerMessage(\"1\", \"13\"),    //スタンプ\n                new TextMessage(\"さっすがー！\")    //テキスト\n            )\n);\n``` \n\n##環境変数\n環境変数をherokuに持たせ、その値をプロパティファイルから参照することができます。\n\n![ss.png](https://qiita-image-store.s3.amazonaws.com/0/194902/0af81901-2de7-4745-3764-2a3aadac2fbd.png)\n\n```properties:application.properties\nline.bot.channelSecret = ${LINE_BOT_CHANNEL_SECRET}\nline.bot.channelToken = ${LINE_BOT_CHANNEL_TOKEN}\nline.bot.handler.path = /callback\n```\n\n#スケジューリング\nここまで来れば、あとは定刻にプッシュさせるだけです！\nSpringのスケジュール機能[@Scheduled](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html)を利用します。\n\n```java:ScheduledTask\n@Slf4j\n@Service\npublic class ScheduledTaskService {\n\n    private static final SimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm:ss\");\n\n    @Scheduled(cron=\"/* cronの記述 */\", zone = \"Asia/Tokyo\")\n    public void executeAlarm() {\n        try {\n            //プッシュする処理を呼び出す\n            pushAlarm();\n        } catch (URISyntaxException e) {\n            log.error(\"{}\", e);\n        }\n        log.info(\"cron executed : \" + sdf.format(new Date()));\n    }\n}\n```\n※@EnableSchedulingアノテーションをmain関数のあるクラスにつけるのを忘れずに。\n\nこれで完成です！\n\n#最後に\n忘れがちな ごみ出しをちょっと楽しくできるのではと思います(´ω`*)\n\n作るにあたり[LINE Messaging API SDK（for Java）](https://github.com/line/line-bot-sdk-java)にある「kitchensink」がとても参考になりました。\n最初はメッセージをプッシュする部分、SDKを使わずに自前実装してました･･･ｗ\nSDKを使用した方がすっきり書けて楽ですね。\n\n今回は燃えるごみの日のみのアラートですが、拡張して燃えないごみの日も作れますし\nメッセージを増やしてランダムでメッセージを出したり、スタンプを送信したりもできます。\nオリジナルリマインダー、ぜひ作ってみてください；）\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-01T23:30:06+09:00",
    "group": null,
    "id": "7b8692662a0b161c555c",
    "likes_count": 5,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Java",
        "versions": []
      },
      {
        "name": "Maven",
        "versions": []
      },
      {
        "name": "spring-boot",
        "versions": []
      },
      {
        "name": "LifeisTech!",
        "versions": []
      },
      {
        "name": "linebot",
        "versions": []
      }
    ],
    "title": "line-bot-sdk-javaでごみ出しリマインダーを作る",
    "dated_at": "2018-01-10T10:14:25+09:00",
    "l": "https://qiita.com/aytdm/items/7b8692662a0b161c555c",
    "er": {
      "description": "気になったことは取りあえずやってみるタイプ",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": "aytdm",
      "id": "aytdm",
      "items_count": 2,
      "linkedin_id": "",
      "location": "Tokyo, Japan",
      "name": "numa",
      "organization": "",
      "permanent_id": 194902,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/194902/profile-images/1525876229",
      "twitter_screen_name": null,
      "website_url": "https://aytdm.com"
    },
    "page_views_count": null
  }
]
